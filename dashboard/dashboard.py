# Nama          : Darrel Danadyaksa Poli
# Email         : darrel.danadyaksa19@gmail.com
# Id Dicoding   : kronosdp

import plotly.graph_objects as go
import plotly.express as px
import pandas as pd
import streamlit as st
import os

# Import Library

# ==============================
# LOAD DATA
# ==============================


@st.cache_resource
def load_data():
    # Look for the 'day.csv' file in the directory and subdirectories
    for root, dirs, files in os.walk("../"):
        if "day.csv" in files:
            data_path = os.path.join(root, "day.csv")
            data = pd.read_csv(data_path)
            return data
    raise FileNotFoundError(
        "day.csv not found in the directory or subdirectories")


data = load_data()


# ==============================
# TITLE DASHBOARD
# ==============================
# Set page title
st.title("Bike Share Dashboard")

# ==============================
# SIDEBAR
# ==============================
st.sidebar.title("Informasi:")
st.sidebar.markdown("**• Nama: Darrel Danadyaksa Poli**")
st.sidebar.markdown(
    "**• Email: [darrel.danadyaksa19@gmail.com](mailto:darrel.danadyaksa19@gmail.com)**")
st.sidebar.markdown(
    "**• Dicoding: [kronosdp](https://www.dicoding.com/users/kronosdp/)**")


st.sidebar.title("Dataset Bike Share")

# ==============================
# MAIN
# ==============================

# Show dataset source


st.sidebar.markdown(
    "[Download Dataset](https://drive.google.com/file/d/1RaBmV6Q6FYWU4HWZs80Suqd7KQC34diQ/view?usp=sharing)")

# Show the dataset
if st.sidebar.checkbox("Show Dataset"):
    st.subheader("Raw Data")
    st.write(data)

    # Title and author information
    st.title("Bike Sharing Dataset Summary")
    st.write("**Author**: Hadi Fanaee-T")
    st.write(
        "Laboratory of Artificial Intelligence and Decision Support (LIAAD), University of Porto")
    st.write("INESC Porto, Campus da FEUP")
    st.write("Rua Dr. Roberto Frias, 378, 4200-465 Porto, Portugal")

    # Background section
    st.header("Background")
    st.write("""
    Bike sharing systems represent a modern form of traditional bike rentals, where the entire process from membership to rental and return is automated. These systems allow users to rent a bike at one station and return it at another. 
    There are over 500 bike-sharing programs globally, encompassing more than 500,000 bicycles. These systems are important for their role in addressing traffic, environmental, and health concerns.
    """)
    st.write("""
    In addition to their practical applications, the data generated by bike-sharing systems are valuable for research. 
    Unlike other transport services such as buses or subways, bike-sharing systems record the duration, departure, and arrival positions of each trip. 
    This transforms the system into a virtual sensor network that can be used to monitor city mobility, making it possible to detect important events in urban areas.
    """)

    # Data Set section
    st.header("Data Set")
    st.write("""
    The bike-sharing rental process is highly influenced by environmental and seasonal factors such as weather conditions, precipitation, day of the week, and time of day. 
    The core dataset consists of historical logs from the years 2011 and 2012 from the Capital Bikeshare system in Washington D.C., USA. 
    The data were aggregated on both hourly and daily bases, with additional weather information extracted from [freemeteo.com](http://www.freemeteo.com).
    """)

    # Associated tasks section
    st.header("Associated Tasks")
    st.write("""
    - **Regression**: Prediction of bike rental count (hourly or daily) based on environmental and seasonal settings.
    - **Event and Anomaly Detection**: The count of rented bikes is correlated to certain events, such as Hurricane Sandy on 2012-10-30 in Washington D.C. 
    Such data can be used to validate event detection algorithms. Some important events are detailed in the associated publication [1].
    """)

    # Files section
    st.header("Files")
    st.write("""
    - **Readme.txt**: File containing general information about the dataset.
    - **hour.csv**: Aggregated bike sharing counts on an hourly basis (17,379 records).
    - **day.csv**: Aggregated bike sharing counts on a daily basis (731 records).
    """)

    # Dataset characteristics section
    st.header("Dataset Characteristics")
    st.write("""
    Both the `hour.csv` and `day.csv` files contain the following fields, except for `hr`, which is only present in `hour.csv`:

    - **instant**: Record index.
    - **dteday**: Date.
    - **season**: Season (1 = Spring, 2 = Summer, 3 = Fall, 4 = Winter).
    - **yr**: Year (0 = 2011, 1 = 2012).
    - **mnth**: Month (1 to 12).
    - **hr**: Hour (0 to 23), only in `hour.csv`.
    - **holiday**: Whether the day is a holiday (extracted from [D.C. holiday schedule](http://dchr.dc.gov/page/holiday-schedule)).
    - **weekday**: Day of the week.
    - **workingday**: 1 if the day is neither a weekend nor a holiday, otherwise 0.
    - **weathersit**: Weather situation:
    - 1: Clear, Few clouds, Partly cloudy.
    - 2: Mist + Cloudy, Mist + Broken clouds, Mist + Few clouds.
    - 3: Light Snow, Light Rain + Thunderstorm + Scattered clouds.
    - 4: Heavy Rain + Ice Pellets + Thunderstorm, Snow + Fog.
    - **temp**: Normalized temperature (Celsius), values divided by 41 (max).
    - **atemp**: Normalized feeling temperature (Celsius), values divided by 50 (max).
    - **hum**: Normalized humidity, values divided by 100 (max).
    - **windspeed**: Normalized wind speed, values divided by 67 (max).
    - **casual**: Count of casual users.
    - **registered**: Count of registered users.
    - **cnt**: Total count of bike rentals (casual + registered).
    """)

    # License section
    st.header("License")
    st.write("""
    Use of this dataset in publications must be cited to the following publication:

    Fanaee-T, Hadi, and Gama, Joao, "Event labeling combining ensemble detectors and background knowledge", Progress in Artificial Intelligence (2013): pp. 1-15, Springer Berlin Heidelberg, doi: [10.1007/s13748-013-0040-3](http://dx.doi.org/10.1007/s13748-013-0040-3).
    """)

    # Contact section
    st.header("Contact")
    st.write("""
    For further information about this dataset, please contact Hadi Fanaee-T (hadi.fanaee@fe.up.pt).
    """)

# Display summary statistics
if st.sidebar.checkbox("Show Summary Statistics"):
    st.subheader("Summary Statistics")
    st.write(data.describe())

# Show nan
if st.sidebar.checkbox("Show Missing Values"):
    st.subheader("Missing Values")
    st.write(data.isna().sum())


# ==============================
# VISUALIZATION
# ==============================

if st.sidebar.checkbox("Show Distribution of variables with target variable"):
    st.subheader("Distribution of Variables with Target Variable")
    st.write(
        "This section shows the distribution of the variables with the target variable `cnt`.")

    # Show the distribution of the target variable
    st.subheader("Distribution of Target Variable")
    fig = px.histogram(data, x="cnt", title="Distribution of Target Variable")
    st.plotly_chart(fig)

    # Show the distribution of the target variable by season
    st.subheader("Distribution of Target Variable by Season")
    fig = px.box(data, x="season", y="cnt",
                 title="Distribution of Target Variable by Season")
    st.plotly_chart(fig)

    # Show the distribution of the target variable by weather
    st.subheader("Distribution of Target Variable by Weather")
    fig = px.box(data, x="weathersit", y="cnt",
                 title="Distribution of Target Variable by Weather")
    st.plotly_chart(fig)

    # Show the distribution of the target variable by weekday
    st.subheader("Distribution of Target Variable by Weekday")
    fig = px.box(data, x="weekday", y="cnt",
                 title="Distribution of Target Variable by Weekday")
    st.plotly_chart(fig)

    # Show the distribution of the target variable by month
    st.subheader("Distribution of Target Variable by Month")
    fig = px.box(data, x="mnth", y="cnt",
                 title="Distribution of Target Variable by Month")
    st.plotly_chart(fig)

    # Show the distribution of the target variable by year
    st.subheader("Distribution of Target Variable by Year")
    fig = px.box(data, x="yr", y="cnt",
                 title="Distribution of Target Variable by Year")
    st.plotly_chart(fig)

    # Show the distribution of the target variable by holiday
    st.subheader("Distribution of Target Variable by Holiday")
    fig = px.box(data, x="holiday", y="cnt",
                 title="Distribution of Target Variable by Holiday")
    st.plotly_chart(fig)

    # Show the distribution of the target variable by workingday
    st.subheader("Distribution of Target Variable by Workingday")
    fig = px.box(data, x="workingday", y="cnt",
                 title="Distribution of Target Variable by Workingday")
    st.plotly_chart(fig)

    # Show the distribution of the target variable by casual
    st.subheader("Distribution of Target Variable by Casual")
    fig = px.scatter(data, x="casual", y="cnt",
                     title="Distribution of Target Variable by Casual")
    st.plotly_chart(fig)

    # Show the distribution of the target variable by registered
    st.subheader("Distribution of Target Variable by Registered")
    fig = px.scatter(data, x="registered", y="cnt",
                     title="Distribution of Target Variable by Registered")
    st.plotly_chart(fig)

    # Show the distribution of the target variable by cnt
    st.subheader("Distribution of Target Variable by Cnt")
    fig = px.scatter(data, x="cnt", y="cnt",
                     title="Distribution of Target Variable by Cnt")
    st.plotly_chart(fig)

# ==============================
# Targets and Temperature
# ==============================
if st.sidebar.checkbox("Scatterplot of 'casual', 'registered', and 'cnt' with 'temp'"):
    st.subheader(
        "Scatterplot of 'casual', 'registered', and 'cnt' with 'temp'")
    st.write(
        "This section shows the scatterplot of the variables `casual`, `registered`, and `cnt` with the variable `temp`.")

    # Show the scatterplot of casual with temp
    st.subheader("Scatterplot of Casual with Temp")
    fig = px.scatter(data, x="temp", y="casual",
                     title="Scatterplot of Casual with Temp")
    st.plotly_chart(fig)

    # Show the scatterplot of registered with temp
    st.subheader("Scatterplot of Registered with Temp")
    fig = px.scatter(data, x="temp", y="registered",
                     title="Scatterplot of Registered with Temp")
    st.plotly_chart(fig)

    # Show the scatterplot of cnt with temp
    st.subheader("Scatterplot of Cnt with Temp")
    fig = px.scatter(data, x="temp", y="cnt",
                     title="Scatterplot of Cnt with Temp")
    st.plotly_chart(fig)

# ==============================
# Target and Temperatures
# ==============================
# temp, atemp, hum, windspeed vs cnt
if st.sidebar.checkbox("Scatterplot of 'temp', 'atemp', 'hum', 'windspeed' with 'cnt'"):
    st.subheader(
        "Scatterplot of 'temp', 'atemp', 'hum', 'windspeed' with 'cnt'")
    st.write(
        "This section shows the scatterplot of the variables `temp`, `atemp`, `hum`, and `windspeed` with the variable `cnt`.")

    # Show the scatterplot of temp with cnt
    st.subheader("Scatterplot of Temp with Cnt")
    fig = px.scatter(data, x="temp", y="cnt",
                     title="Scatterplot of Temp with Cnt")
    st.plotly_chart(fig)

    # Show the scatterplot of atemp with cnt
    st.subheader("Scatterplot of Atemp with Cnt")
    fig = px.scatter(data, x="atemp", y="cnt",
                     title="Scatterplot of Atemp with Cnt")
    st.plotly_chart(fig)

    # Show the scatterplot of hum with cnt
    st.subheader("Scatterplot of Hum with Cnt")
    fig = px.scatter(data, x="hum", y="cnt",
                     title="Scatterplot of Hum with Cnt")
    st.plotly_chart(fig)

    # Show the scatterplot of windspeed with cnt
    st.subheader("Scatterplot of Windspeed with Cnt")
    fig = px.scatter(data, x="windspeed", y="cnt",
                     title="Scatterplot of Windspeed with Cnt")
    st.plotly_chart(fig)


# ==============================
# FEATURE ENGINEERING
# ==============================

if st.sidebar.checkbox("Show Feature Engineering"):
    st.subheader("Feature Engineering")
    st.write(
        "This section shows the feature engineering process that was done on the dataset.")

    # Create a new column for the season
    data["season_name"] = data["season"].map(
        {1: "Spring", 2: "Summer", 3: "Fall", 4: "Winter"})

    # Create a new column for the weather
    data["weather_name"] = data["weathersit"].map(
        {1: "Clear", 2: "Mist", 3: "Light Rain", 4: "Heavy Rain"})

    # what we're doing
    st.write("We created two new columns: `season_name` and `weather_name`. We mapped the values of the `season` and `weathersit` columns to the corresponding names.")

    # Show the new columns
    st.subheader("New Columns")
    st.write("The following columns were created:")
    st.write(data[["season_name", "weather_name"]])

# ==============================
# MAIN
# ==============================

# write something
st.write("This is a simple dashboard that shows the distribution of the variables in the dataset, as well as the relationships between the variables and the target variable `cnt`. The dataset used in this dashboard is the Bike Share dataset.")

# explain that target variable can also be casual, registered, or cnt
st.write("The target variable can be `casual`, `registered`, or `cnt`. The `casual` variable represents the number of casual users, the `registered` variable represents the number of registered users, and the `cnt` variable represents the total number of users.")


# ==============================
st.write("In this project, we use mean and median. The mean and median are calculated using the following formulas:")
st.latex(r'''
\text{Mean} = \frac{\sum_{i=1}^{n} x_i}{n}
''')
st.latex(r'''
\text{Median} = \begin{cases}
x_{\frac{n+1}{2}} & \text{if } n \text{ is odd} \\
\frac{x_{\frac{n}{2}} + x_{\frac{n}{2}+1}}{2} & \text{if } n \text{ is even}
\end{cases}
''')

st.write("We also calculate correlation matrix using pearson method. The correlation matrix is calculated using the following formula:")
st.latex(r'''
\text{Correlation} = \frac{\sum_{i=1}^{n} (x_i - \bar{x})(y_i - \bar{y})}{\sqrt{\sum_{i=1}^{n} (x_i - \bar{x})^2} \sqrt{\sum_{i=1}^{n} (y_i - \bar{y})^2}}
''')

# show correlation matrix but only for numerical columns
st.subheader("Correlation Matrix")
st.write("The correlation matrix shows the relationship between the numerical columns in the dataset.")
# filter data to only include numerical columns
numerical_data = data.select_dtypes(include=["int64", "float64"])
# calculate correlation matrix
correlation_matrix = numerical_data.corr(method="pearson")
# create a heatmap
fig = go.Figure(data=go.Heatmap(
    z=correlation_matrix.values,
    x=correlation_matrix.columns,
    y=correlation_matrix.columns,
    colorscale='Viridis'))
# show the heatmap
st.plotly_chart(fig)


# ==============================
# FOOTER
# ==============================
st.sidebar.title("About:")
st.sidebar.markdown(
    "This dashboard was created by [Darrel Danadyaksa Poli](https://www.dicoding.com/users/kronosdp/).")
st.sidebar.markdown(
    "The dataset used in this dashboard is the Bike Share dataset. The dataset was obtained from the UCI Machine Learning Repository.")

# ==============================
